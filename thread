package com.t;

import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Buffer {
    private Queue<Integer> queue = new LinkedList<>();
    private int capacity = 10;

    public synchronized void produce(int item) throws InterruptedException {
        while (queue.size() == capacity) {  // 队列满时等待
            wait();
        }
        queue.add(item);
        notifyAll();  // 唤醒所有消费者
    }

    public synchronized int consume() throws InterruptedException {
        while (queue.isEmpty()) {  // 队列空时等待
            wait();
        }
        int item = queue.poll();
        notifyAll();  // 唤醒所有生产者
        return item;
    }
}

 class BufferWithCondition {
    private Lock lock = new ReentrantLock();
    private Condition notFull = lock.newCondition();
    private Condition notEmpty = lock.newCondition();
    private Queue<Integer> queue = new LinkedList<>();
    private int capacity = 10;

    public void produce(int item) throws InterruptedException {
        lock.lock();
        try {
            while (queue.size() == capacity) {
                notFull.await();  // 等待非满条件
            }
            queue.add(item);
            notEmpty.signal();  // 唤醒一个消费者
        } finally {
            lock.unlock();
        }
    }
}


//线程同步与通信
//条件变量 	线程间状态依赖协作 	wait()/notify()
//互斥锁 	临界区资源保护 	synchronized、ReentrantLock
//原子操作 	简单变量无锁更新 	AtomicInteger、CAS（解决ABA问题）
//升级流程：无锁 → 偏向锁 → 轻量级锁（自旋） → 重量级锁
//优化策略：锁消除（JIT）、锁粗化、逃逸分析
//
//并发容器 	ConcurrentHashMap 	分段锁/CAS实现高并发读写310
//CopyOnWriteArrayList 	写时复制避免读写冲突10
//线程池 	ThreadPoolExecutor 	核心参数：核心线程数/队列容量/拒绝策略37
//同步工具 	CountDownLatch/CyclicBarrier 	多阶段任务协同10
//Semaphore 	资源配额控制（如限流）10
//
//
//特性 	wait()/notify() 	Condition
//所属类 	Object 类方法 	Lock 接口的配套接口（如 ReentrantLock）14
//锁依赖 	必须配合 synchronized 使用 	必须配合显式锁（如 Lock）使用14
//等待队列 	单个隐式等待队列 	支持多个显式等待队列（通过 newCondition() 创建）14
//唤醒精度 	notify() 随机唤醒一个线程 	signal() 可精准唤醒指定 Condition 队列的线程14
//中断响应 	仅 wait() 支持中断 	提供 awaitUninterruptibly() 等更多中断控制
//
//为什么 wait()/notify() 必须在同步块中调用？‌
//        ‌线程安全‌：调用前需持有对象监视器锁（synchronized），否则抛出 IllegalMonitorStateException69。
//        ‌竞态条件‌：若不加锁，notify() 可能先于 wait() 执行，导致线程永久阻塞
//
//Condition 相比 wait()/notify() 的优势？‌
//        ‌多路通知‌：一个 Lock 可创建多个 Condition，实现不同条件的线程分组管理（如生产者-消费者模型中的“非空”和“非满”条件）14。
//        ‌灵活性‌：支持超时等待（awaitNanos()）、不可中断等待（awaitUninterruptibly()）等扩展功能47。
//        ‌虚假唤醒问题如何解决？‌
//
//        ‌通用方案‌：用 while 循环而非 if 检查条件，确保被唤醒后再次验证条件是否满足910。
//
//javaCopy Code
//synchronized (lock) {
//        while (!condition) {  // 防止虚假唤醒
//        lock.wait();
//        }
//                }
//
//signal() 和 signalAll() 的区别？‌
//signal()：唤醒同一 Condition 队列中的一个线程，效率高但可能引发线程饥饿47。
//signalAll()：唤醒所有等待线程，更安全但可能造成竞争


Java 锁升级（无锁 → 偏向锁 → 轻量级锁 → 重量级锁）是 JVM 对 synchronized 关键字的关键优化机制，旨在根据竞争强度动态调整锁策略以平衡性能与线程安全。以下是详细流程及各阶段原理：

        🔄 ‌锁升级完整流程‌
        mermaid
Copy Code
graph LR
A[无锁] -->|首次线程访问| B[偏向锁]
B -->|出现第二个线程竞争| C[轻量级锁]
C -->|竞争加剧/自旋超限| D[重量级锁]
B -->|批量重偏向机制| B
C -->|批量撤销机制| A

🔍 ‌各阶段详解‌
1. 无锁状态（Unlocked）‌
对象头结构‌
Mark Word 包含哈希码（25位）、分代年龄（4位），锁标志位为 01。
触发条件‌
对象刚创建或未被任何线程锁定。
特点‌
所有线程可直接通过 CAS 操作竞争资源，无同步开销。
        2. 偏向锁（Biased Lock）‌
对象头变化‌
存储持有锁的‌线程 ID（54位）‌ + 时间戳（2位） + 分代年龄（4位），锁标志位保留 01。
触发条件‌
首次有线程访问同步代码块。
核心机制‌
通过 CAS 将线程 ID 写入 Mark Word，成功后该线程后续进入同步代码块‌无需加锁操作‌。
锁‌不会主动释放‌，直到其他线程竞争时才触发撤销。
撤销场景‌
其他线程尝试竞争时，JVM 检查原线程是否存活：
若存活且仍需锁 → 升级为轻量级锁。
若线程死亡或不需锁 → 重置为无锁状态。
批量重偏向‌：当同一类对象发生偏向锁撤销超过 20 次（默认），JVM 会将该类新对象的锁直接偏向新线程。
        3. 轻量级锁（Lightweight Lock）‌
对象头变化‌
替换为‌指向线程栈帧中锁记录（Lock Record）的指针（62位）‌，锁标志位变为 00。
触发条件‌
偏向锁被撤销，或存在‌轻度竞争‌（多线程交替执行）。
核心机制‌
自旋锁（CAS）‌：竞争线程通过循环 CAS 尝试修改对象头指针，而非立即阻塞。
默认自旋上限为 ‌10 次‌（可通过 -XX:PreBlockSpin 调整）。
升级条件‌
自旋超过阈值仍无法获取锁。
竞争线程数 > 1（如第三个线程加入竞争）。
批量撤销‌：若轻量级锁撤销次数过多，JVM 会禁用该类的偏向锁优化，后续对象直接进入轻量级锁状态。
        4. 重量级锁（Heavyweight Lock）‌
对象头变化‌
存储‌指向操作系统互斥量（mutex）的指针（62位）‌，锁标志位为 10。
触发条件‌
轻量级锁竞争加剧或自旋失败。
核心机制‌
通过操作系统内核的 ‌Monitor 对象‌实现阻塞/唤醒机制。
未获锁的线程进入‌阻塞队列‌，由操作系统调度。
代价‌
涉及‌用户态→内核态切换‌，上下文切换成本高昂。
        ⚖️ ‌锁升级设计哲学‌
        无竞争优先‌
偏向锁消除单线程重复加锁开销。
短时竞争优化‌
轻量级锁通过自旋避免线程阻塞。
激烈竞争兜底‌
重量级锁确保系统稳定性，但性能最低。
不可逆升级‌
锁状态只能升级（低→高），不可降级。

        💎 ‌关键点‌：锁升级是 JVM 根据竞争动态优化 synchronized 性能的核心机制，开发者可通过 -XX:+UseBiasedLocking 等参数调优。


CompletableFuture 是 Java 8 引入的异步编程核心类，它扩展了 Future 接口，解决了传统异步编程中的回调嵌套、任务编排和异常处理难题，适用于需要链式调用、结果聚合或响应式编程的场景。其核心特性与使用要点如下：

🔧 ‌一、核心特性‌

链式任务编排‌
支持通过 thenApply、thenAccept、thenCompose 等方法串联异步操作，避免回调地狱（Callback Hell）。

java
Copy Code
CompletableFuture.supplyAsync(() -> "data")
    .thenApply(s -> s.toUpperCase())  // 转换结果
    .thenAccept(System.out::println); // 消费结果


组合多个任务‌

并行聚合‌：thenCombine 合并两个独立任务结果。
批量处理‌：allOf / anyOf 等待全部/任意任务完成。
java
Copy Code
CompletableFuture<Void> all = CompletableFuture.allOf(future1, future2);
all.thenRun(() -> System.out.println("All tasks completed"));


异常处理机制‌

exceptionally：捕获异常并返回兜底值。
handle：统一处理正常结果与异常。
java
Copy Code
future.exceptionally(ex -> "Fallback value"); // 异常时返回默认值


异步执行控制‌
默认使用 ForkJoinPool.commonPool()，但可通过重载方法指定自定义线程池（‌推荐避免共享默认池‌）。

java
Copy Code
ExecutorService customPool = Executors.newFixedThreadPool(10);
CompletableFuture.runAsync(task, customPool);

⚙️ ‌二、底层机制‌
组件‌	‌作用‌
ForkJoinPool‌	默认线程池，采用工作窃取算法优化计算密集型任务。
CompletionStage‌	定义任务编排接口，支撑链式调用与结果传递。
回调栈‌	内部维护回调链，按顺序触发依赖任务。
⚠️ ‌三、使用注意事项‌

避免阻塞操作‌
在异步任务中执行阻塞 I/O 会使线程饥饿，应配合 CompletableFuture.supplyAsync 使用专用线程池。

谨慎使用默认线程池‌
ForkJoinPool.commonPool() 适用于短期计算任务，长时间运行或 I/O 密集型任务需自定义线程池。

结果获取方式‌

非阻塞：通过回调（如 thenAccept）处理结果；
阻塞：join()（不抛检查异常）或 get()（需处理 InterruptedException）。

资源泄漏风险‌
未处理的 CompletableFuture 链可能因未注册回调导致任务滞留，需确保终结操作（如 thenRun）。

💎 ‌四、适用场景‌
场景‌	‌示例‌
异步 HTTP 请求聚合	并行调用多个 API 并合并结果。
流水线数据处理	读取 → 清洗 → 转换 → 存储的链式操作。
微服务编排	组合多个服务调用结果（如订单 + 库存）。

与传统 Future 对比‌：

能力‌	Future	CompletableFuture
链式调用	❌	✅
异常处理	手动检查	内置机制
多任务组合	需手动实现	原生支持
🌰 ‌五、代码最佳实践‌
java
Copy Code
// 1. 自定义线程池（避免阻塞操作影响默认池）
ExecutorService ioPool = Executors.newCachedThreadPool();

// 2. 异步执行 + 异常处理
CompletableFuture.supplyAsync(() -> fetchDataFromDB(), ioPool)
    .thenApply(data -> process(data))
    .exceptionally(ex -> { 
        log.error("Failed", ex);
        return Collections.emptyList(); 
    })
    .thenAccept(result -> sendNotification(result));


总结‌：CompletableFuture 大幅简化了 Java 异步编程，但其线程池行为与异常处理需谨慎配置，适用于需声明式编排异步操作的场景（如微服务调用链、数据流水线）。


CountDownLatch 是 Java 并发包（java.util.concurrent）中的同步工具类，其核心作用在于协调多个线程间的执行顺序。其主要功能和作用可概括为以下三点：

等待多个线程完成操作‌
允许单个线程（如主线程）等待一组子线程完成指定任务后再继续执行。通过初始化计数器（count）指定需等待的线程数，每个线程完成任务后调用 countDown() 将计数器减 1；当计数器归零时，等待的线程被唤醒继续执行后续逻辑。常用于主线程汇总子线程结果或等待服务初始化完成。

控制并行任务的起始点‌
实现类似“发令枪”的同步机制，确保多个线程在某一时刻同时开始执行任务。例如初始化多个线程后，主线程调用 countDown() 将计数器置零，所有等待的线程同时被释放执行任务，提升并行效率。

实现单次使用的同步屏障‌
CountDownLatch 的计数器为一次性设计，归零后无法重置，因此适用于只需单次等待的场景。若需重复使用同步屏障，应选择 CyclicBarrier。

典型应用场景
主线程等待子线程完成‌：主线程需等待所有子线程加载资源、初始化服务或完成计算后再继续汇总结果。
多线程任务统一启动‌：模拟并发测试时，确保所有线程准备就绪后同时开始执行。
服务依赖启动‌：某个服务需等待其依赖的所有服务启动完成后再启动自身。
关键特性
计数器不可重用‌：计数器归零后无法重置，再次调用 await() 会直接通过，不阻塞线程。
底层依赖 AQS‌：基于 AbstractQueuedSynchronizer 共享锁机制实现线程阻塞与唤醒。

示例伪代码‌

java
Copy Code
// 初始化计数器（需等待3个任务）
CountDownLatch latch = new CountDownLatch(3);

// 子线程完成任务后调用 countDown()
new Thread(() -> {
    doTask();
    latch.countDown(); // 计数器减1
}).start();

// 主线程等待所有任务完成
latch.await(); 
System.out.println("All tasks completed!");


ForkJoinPool 与普通线程池（如 ThreadPoolExecutor）的核心差异主要体现在‌任务调度机制、适用场景和设计目标‌上，具体对比如下：

🧠 ‌一、核心设计差异‌
特性‌	‌ThreadPoolExecutor（普通线程池）‌	‌ForkJoinPool‌
任务调度‌	共享任务队列，所有线程竞争获取任务	‌工作窃取（Work Stealing）‌：每个线程拥有独立任务队列，空闲线程从其他队列‌尾部窃取任务‌
任务类型‌	处理独立任务单元（无依赖关系）	专为‌递归可分解任务‌设计（如分治算法），支持 fork() 提交子任务、join() 合并结果
线程数量‌	需手动配置核心/最大线程数，适应I/O或混合型任务	默认线程数 = CPU核心数，‌优化计算密集型任务‌
任务队列‌	基于 BlockingQueue（如 ArrayBlockingQueue）	每个线程维护‌本地双端队列（Deque）‌，减少竞争
⚙️ ‌二、工作流程对比‌
普通线程池（ThreadPoolExecutor）‌
mermaid
Copy Code
graph LR
    A[任务提交] --> B(共享任务队列)
    B --> C[线程竞争获取任务]
    C --> D[执行任务]

瓶颈‌：共享队列可能引发线程竞争，高并发时影响吞吐量。
适用场景‌：HTTP请求处理、独立事务任务等。
ForkJoinPool‌
mermaid
Copy Code
graph TB
    T[主任务] -->|fork| T1[子任务1]
    T -->|fork| T2[子任务2]
    T1 -->|join| T
    T2 -->|join| T
    Worker1[线程1队列] -->|窃取尾部任务| Worker2[线程2队列]

优势‌：
负载均衡‌：空闲线程主动窃取任务，减少资源闲置；
低竞争‌：本地队列优先处理，仅窃取时访问其他队列。
适用场景‌：递归计算（如归并排序）、大规模数据处理。
⚠️ ‌三、关键注意事项‌

任务阻塞问题‌

ThreadPoolExecutor：线程阻塞（如I/O）会导致线程闲置，需增大线程数。
ForkJoinPool：‌仅适合计算密集型任务‌，阻塞会严重降低性能。

资源消耗‌

ForkJoinPool 的工作窃取需维护多队列，内存开销更高。

任务拆分逻辑‌

ForkJoinPool 需‌显式编写递归拆分代码‌（继承 RecursiveTask/RecursiveAction），普通线程池任务无需拆分。
💎 ‌总结选择建议‌
场景‌	‌推荐线程池‌
高I/O等待、独立任务（如Web服务）	ThreadPoolExecutor
计算密集型递归任务（如并行计算）	ForkJoinPool

简言之：

ForkJoinPool = 工作窃取 + 分治优化 + CPU密集型‌；
ThreadPoolExecutor = 共享队列 + 通用任务 + 灵活配置‌。

这段描述涉及 ForkJoinPool 的 ‌异步模式（asyncMode）‌ 配置，其核心作用如下：

public static ExecutorService newWorkStealingPool(int parallelism, String namePrefix) {
        return new ForkJoinPool(parallelism,
                new ThingsBoardForkJoinWorkerThreadFactory(namePrefix),
                null, true);
    }
ForkJoinPool 's true parameter:
🔧 ‌异步模式（asyncMode=true）的核心机制‌

调度策略切换‌

默认模式（LIFO）：线程本地任务队列采用‌后进先出‌（栈结构），优先处理最新提交的子任务。
异步模式（FIFO）：启用本地‌先进先出‌队列，适合处理无依赖关系的独立事件任务（如消息处理）。

适用场景‌

事件驱动型任务‌：当工作线程仅处理无需合并结果的异步任务（如事件回调、日志处理）时，FIFO 模式可减少任务积压延迟。
避免 join 阻塞‌：若任务不会被显式合并（即不调用 join()），FIFO 可优化任务执行顺序。

性能影响‌

减少线程空闲：FIFO 确保早期提交的任务优先执行，避免默认模式下因递归拆分导致的子任务堆积。
降低上下文切换：适用于短平快的任务流，与工作窃取算法协同提升吞吐量。
⚙️ ‌配置方式‌

通过构造函数参数启用异步模式：

java
Copy Code
ForkJoinPool pool = new ForkJoinPool(
    Runtime.getRuntime().availableProcessors(),
    ForkJoinPool.defaultForkJoinWorkerThreadFactory,
    null, 
    true  // asyncMode=true
);


此配置会强制所有本地队列采用 FIFO 策略，但全局工作窃取仍保持从其他队列‌尾部窃取‌的规则。

🆚 ‌与默认模式对比‌
特性‌	默认模式（LIFO）	异步模式（FIFO）
任务顺序‌	栈结构（后进先出）	队列结构（先进先出）
适用场景‌	递归分治任务（需 join）	事件流、无依赖异步任务
线程行为‌	优先处理最新子任务	优先处理最早提交任务
⚠️ ‌注意事项‌
任务类型匹配‌：若任务存在父子依赖（如 RecursiveTask），默认 LIFO 模式更高效。
资源消耗‌：FIFO 可能增加内存占用（需维护有序队列）。

该设计体现了 ForkJoinPool 的灵活性，通过调度策略适配不同并行场景。
