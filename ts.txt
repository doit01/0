
Tauri是一个多语言通用工具包，用于构建跨平台的桌面应用程序。它结合了Web前端和系统后端技术，允许开发人员使用Rust和HTML的组合来创建应用程序。Tauri的主要作用包括‌：
    ‌跨平台支持‌：Tauri允许开发人员使用Web技术（如HTML、CSS、JavaScript）来开发桌面应用程序，同时支持多个操作系统，如Windows、macOS和Linux。


Vue 生态‌
Element UI‌：Vue 2.0 的桌面端组件库，适合快速构建企业级应用‌。
Vant‌：支持 Vue 及小程序的移动端组件库，提供轻量级交互组件‌。

Lodash‌：高性能 JavaScript 工具库，支持数组、对象等复杂操作‌。
Ramda‌：函数式编程工具库，强调数据不可变性与函数组合‌。
qs‌：轻量级 URL 参数解析与序列化工具‌。
数据处理‌
Day.js‌：轻量级日期处理库，API 与 Moment.js 兼容‌。
Axios‌：基于 Promise 的 HTTP 请求库，支持浏览器与 Node.js‌。
Big.js‌：高精度数学运算库，适用于金融等场景‌。
动画库‌
Animate.css‌：CSS3 动画库，提供预定义动画效果‌。
Anime.js‌：轻量级 JavaScript 动画引擎，支持复杂时间线控制‌。
交互优化‌
FastClick‌：消除移动端点击 300ms 延迟的轻量库‌。
Waves‌：实现点击波纹效果的 CSS/JS 库‌。
Chart.js‌：轻量级图表库，支持线图、饼图等常见类型‌。
Nodemon‌：自动重启 Node.js 服务的开发辅助工具‌。
UUID‌：生成唯一标识符的标准库‌。
File-saver‌：客户端文件下载与保存解决方案‌。
js-xlsx‌：Excel 文件解析与生成库‌。
选型建议
企业级中后台‌：Ant Design + Axios + Lodash‌
移动端应用‌：Vant + FastClick + Day.js‌
数据可视化项目‌：Chart.js + Anime.js + NX‌
Tern.js‌是一个用于JavaScript的代码分析引擎，主要作用是提供智能的代码补全、类型推断、文档查询等功能，旨在提升开发者的编码效率。Tern.js通过在项目中构建一个类型推断的数据库，帮助开发者获得更准确的代码提示和自动补全
subscriptions-transport-ws 是一个用于在 WebSocket 协议上实现 GraphQL 订阅的库。它允许客户端订阅来自服务器的实时数据更新，这对于构建实时功能的应用程序非常有用，例如聊天应用、实时通知系统、股市数据流等。
作用    实时数据更新：通过 WebSocket 连接，客户端可以实时接收来自服务器的数据更新，而不需要轮询服务器。

splitpanes   
在前端开发中，使用分割窗格（split panes）是一种常见的需求，特别是在构建需要同时展示多个面板或视图的应用时。分割窗格允许用户通过拖动分隔线来调整各个面板的大小，从而实现灵活的布局。在Web开发中，有多种库和框架可以帮助实现这一功能，例如使用HTML和CSS原生方法、Bootstrap、或者专门的JavaScript库如Split.js

quicktype-core‌是一个用于从JSON、JSON Schema、TypeScript和GraphQL查询中生成强类型模型和序列化器的工具。它支持多种编程语言，包括C#、Go、Swift、C++、Java和TypeScript等，使得在多种编程语言中以类型安全的方式处理JSON变得轻而易举‌

qs
序列化对象到查询字符串‌：使用qs.stringify方法可以将JavaScript对象转换为查询字符串。通过第二个参数，可以控制数组如何被序列化为查询字符串‌1。
‌解析查询字符串到对象‌：使用qs.parse方法可以将查询字符串解析为JavaScript对象。通过第二个参数，可以控制解析行为，例如如何处理点号在键名中，或者限制数组的最大长度等‌。
‌处理嵌套对象和数组‌：qs库支持深度嵌套对象的解析和序列化，能够处理复杂的查询参数‌。

RxJS的一些基本用法，包括创建Observable、订阅、使用操作符处理数据流以及使用Subject进行多播
RxJS（Reactive Extensions for JavaScript）是一个使用可观测数据流进行异步编程和基于事件的编程的库。它提供了丰富的操作符来处理这些数据流，使得编写复杂和响应式的JavaScript程序变得更加简单和高效。
import { of } from 'rxjs';
import { map, filter } from 'rxjs/operators';
 // 创建一个Observable，发出数字1,2,3,4,5
const source = of(1, 2, 3, 4, 5);
 // 使用map操作符将每个值乘以2，然后使用filter操作符过滤出偶数
const example = source.pipe(
  map(val => val * 2), // 将每个值乘以2
  filter(val => val % 2 === 0) // 过滤出偶数
);
 // 订阅这个Observable并打印结果
example.subscribe(val => console.log(val)); // 输出: 2, 4, 6, 8, 10 (乘以2后为偶数的结果)


import { Subject } from 'rxjs';
import { take } from 'rxjs/operators'; // 需要导入take操作符来演示如何停止发射数据流
 const subject = new Subject<number>(); // 创建一个Subject，可以广播值给多个观察者
subject.subscribe({
  next: (v) => console.log(`observerA: ${v}`)
});
subject.subscribe({
  next: (v) => console.log(`observerB: ${v}`)
});
 // 向所有观察者广播值1,2,3,然后停止广播（通过调用complete或者使用take操作符）
subject.next(1);
subject.next(2);
subject.next(3);
subject.complete(); // 或者使用 subject.pipe(take(3)).subscribe(...) 来自动完成订阅并在发出3个值后停止发射。

MiniSearch是一个轻量级的JavaScript全文搜索引擎库，适用于浏览器和Node.js环境。它的主要作用是帮助开发者快速实现全文搜索功能，支持自定义字段、模糊搜索和前缀搜索等功能，非常适合小型项目或需要快速集成搜索功能的应用

markdown-it是一款功能强大的Markdown解析器，主要用于将Markdown文本转换为HTML格式。它支持丰富的Markdown语法，包括标题、段落、列表、链接、图片等基本语法，以及表格、脚注、任务列表等扩展语法。通过配置和插件系统，markdown-it可以满足不同的解析需求，提供灵活的文档编辑体验

jsonpath-plus 是一个用于在JSON数据中导航和查询的库，它提供了一个类似于XPath的语法来提取数据。这个库扩展了标准的JSONPath语法，增加了对一些额外特性的支持，例如数组索引、自定义函数等。这对于在前端项目中处理复杂的JSON结构非常有用：
    数据提取：从复杂的JSON结构中提取特定数据。
    条件查询：支持使用条件表达式来过滤和选择数据。
    数组操作：可以处理数组中的元素，例如选择特定索引的元素或过滤数组。

const jsonpath = require('jsonpath-plus');
const data = { /* JSON数据 */ };
const titles = jsonpath({ path: '$.store.book[*].title', json: data });
console.log(titles); // 输出: ["Moby Dick", "The Lord of the Rings"]

shopify/lang-jsonc 是 Shopify 开发的一个库，它主要用于在 Shopify 主题和应用程序中解析和格式化 JSONC 代码。JSONC 是一种 JSON 超集，它在标准 JSON 的基础上添加了一些额外的特性，比如注释和尾随逗号。这使得 JSONC 在配置文件和设置中非常有用，特别是在 Shopify 主题和应用程序的开发中

unhead/vue 作用和例子

unhead 是一个 Vue 插件，主要用于在 Vue 3 应用程序中管理页面头部（head）的元数据，比如 <title>、<meta> 标签等。这对于改善搜索引擎优化（SEO）、控制浏览器标签页的标题和图标等非常有用。
作用 动态更新头部信息：允许你在 Vue 组件中动态地添加、修改或删除 <head> 中的内容，例如改变页面标题或添加新的 meta 标签。
    组件驱动：通过 Vue 组件的方式管理头部信息，使得结构清晰、易于维护。
    服务器端渲染（SSR）支持：对于使用 Nuxt.js 或其他支持 SSR 的 Vue 框架，unhead 能够无缝工作，确保头部信息在服务器端和客户端都能正确渲染

Esprima 是一个用于解析 JavaScript 代码的库,它可以将源代码转换为抽象语法树(AST)

urql/core 的作用
    查询和变更（Queries and Mutations）：允许你执行 GraphQL 查询和变更（mutations）。
    缓存管理：自动管理缓存，包括查询结果的缓存和更新。
    订阅（Subscriptions）：支持 GraphQL 订阅，可以实时接收数据更新。
    批处理请求：自动批处理多个查询和变更以提高性能。
    灵活的数据获取：可以通过钩子（hooks）或直接使用 API 在任何 React 组件中获取数据。



process
环境变量管理‌：process.env可以用来获取和设置环境变量。这在开发、测试和生产环境中非常有用，可以根据不同的环境变量来调整应用的行为。例如，可以通过设置NODE_ENV来区分开发环境和生产环境，从而应用不同的配置‌12。
‌命令行参数获取‌：process.argv用于获取命令行参数，这对于调试和启动脚本时传递参数非常方便‌1。
‌特殊参数获取‌：process.execArgv用于获取启动Node.js进程时使用的特殊参数，这对于调试和优化应用非常有帮助‌1。
‌当前工作目录获取‌：process.cwd()返回当前工作目录的路径，这在处理文件路径时非常有用‌1。
‌异步编程‌：process.nextTick(fn)用于将函数fn放入事件循环的下一个tick中执行，这对于处理异步操作非常高效‌

Paho MQTT 是一个开源的客户端库，用于实现 MQTT 协议。MQTT（消息队列遥测传输）是一种轻量级的发布/订阅消息传输协议，广泛用于物联网（IoT）和移动应用中，因为它允许设备在网络上以最小的带宽和资源消耗交换消息




Lossless-JSON的主要作用是解析和字符串化JSON数据时，不会丢失数字信息，特别是处理大数字时能够保持精度。‌
作用

Lossless-JSON的主要作用是解决原生JSON.parse和JSON.stringify在处理大数字时可能出现的精度损失问题。它能够精确地解析和字符串化大数字，保证在处理JSON数据时不会丢失任何数字信息。Lossless-JSON通过将数值存储为字符串的轻量级类LosslessNumber，避免了信息丢失
yargs-parser‌是一个用于解析命令行参数的库，主要用于将命令行参数解析成一个对象，方便在Node.js应用程序中使用这些参数。

Wonka 的应用场景

Wonka 适用于多种场景，特别是在需要处理异步数据流或需要对数据进行复杂转换的场景中表现尤为出色：

    ‌前端开发‌：在现代前端框架中，如React或Vue，Wonka 可以用于处理复杂的用户交互事件流，如表单输入、按钮点击等。
    ‌后端开发‌：在Node.js环境中，Wonka 可以用于处理 HTTP 请求流、数据库查询结果流等。
    ‌数据处理‌：在数据科学或机器学习领域，Wonka 可以用于处理大规模数据集，进行数据清洗、转换和聚合‌1。
import { stream } from 'wonka';

// 创建一个简单的流，模拟用户点击事件
const clickStream = stream(() => {
  let count = 0;
  return {
    subscribe(observer) {
      const interval = setInterval(() => {
        observer.next({ type: 'click', count });
        count++;
      }, 1000);
      return () => clearInterval(interval);
    }
  };
});




vueuse/core 是 Vue 3 生态系统中的一个库，它提供了一系列实用的 Composition API 函数，旨在简化 Vue 开发中的常见任务。vueuse/core 库由 Antfu 创建，并被广泛认为是 Vue 3 中最受欢迎的实用函数库之一。
主要作用

    简化状态管理：通过提供诸如 useToggle, useLocalStorage, useMouse 等函数，简化了状态管理、事件处理和副作用管理等。

    提高代码可读性和复用性：通过提供一系列封装好的函数，开发者可以更容易地编写可读性和可维护性高的代码。
lodash
var _ = require('lodash');
循环 //lodash的times方法
    _.times(5,function(a){
        console.log(a);
    });
2、深层查找属性值
 var ownerArr = [{
        "owner": "Colin",
        "pets": [{"name": "dog1"}, {"name": "dog2"}]
    }, {
        "owner": "John",
        "pets": [{"name": "dog3"}, {"name": "dog4"}]
    }];


 var lodashMap = _.map(ownerArr, 'pets[0].name');
    console.log('------- lodashMap -------');
    console.log(lodashMap);
3、深克隆对象
 var objB = _.cloneDeep(objA);
5、扩展对象
  Object.prototype.extend = function(obj) {
        for (var i in obj) {
            if (obj.hasOwnProperty(i)) {    //判断被扩展的对象有没有某个属性，
                this[i] = obj[i];
            }
        }
    };

    var objA = {"name": "戈德斯文", "car": "宝马"};
    var objB = {"name": "柴硕", "loveEat": true};

    objA.extend(objB);
    console.log(objA); 

    console.log(_.assign(objA, objB));

7、判断对象中是否含有某元素
 var smartPerson = {
            'name': '戈德斯文',
            'gender': 'male'
        },
        smartTeam = ["戈德斯文", "杨海月", "柴硕", "师贝贝"];


    console.log(_.includes(smartPerson, '戈德斯文'));
    console.log(_.includes(smartTeam, '杨海月'));
    console.log(_.includes(smartTeam, '杨海月',2));

zod 验证 类型约束
import { z } from 'zod';

const FormSchema = z.object({
  name: z.string().min(3),
  email: z.string().email(),
  password: z.string().min(8),
});

const formData = { name: 'John Doe', email: 'john@example.com', password: 'password123' };
try {
  const validatedForm = FormSchema.parse(formData);
  console.log('表单验证通过:', validatedForm);
} catch (error) {
  console.error('表单验证失败:', error);
}

io-ts 是一个用于运行时类型系统，主要用于输入输出（IO）数据的解码和编码，io-ts 依赖于 fp-ts 库，如果版本不匹配，可能会导致编译错误或运行时错误。



接口（interface）与类型别名（type）的区别‌

    ‌接口‌：定义对象结构，支持继承（extends）和声明合并（同名接口自动合并）‌13。
    ‌类型别名‌：可为任意类型命名（联合、交叉、元组等），不支持合并‌34。

typescriptCopy Code
interface User { name: string; }
interface User { age: number; }  // 合并为 { name: string; age: number; }
type ID = string | number;        // 联合类型别名

联合类型与交叉类型‌

    ‌联合类型（|）‌：允许变量为多种类型之一，如string | number‌45。
    ‌交叉类型（&）‌：合并多个类型的属性，如A & B‌45。

typescriptCopy Code
type Admin = { role: string } & User;  // 合并Admin与User属性

any与unknown的区别‌

    ‌any‌：绕过类型检查，可能导致运行时错误‌58。
    ‌unknown‌：需通过类型断言或收窄后才可操作，更安全‌。

typescriptCopy Code
let data: unknown = fetchData();
if (typeof data === "string") data.toUpperCase();  // 类型收窄

模块（module）与命名空间（namespace）‌
    ‌模块‌：基于文件作用域，使用import/export管理依赖‌36。
    ‌命名空间‌：逻辑分组代码，避免全局污染（适用于旧代码迁移）‌36。

实用工具类型（Utility Types）‌

    ‌Partial<T>‌：所有属性变为可选。
    ‌Pick<T, K>‌：选取指定属性‌5。

typescriptCopy Code
type User = { id: number; name: string; };
type UserPreview = Pick<User, "name">;  // { name: string; }

如何实现一个DeepReadonly类型？‌
    递归遍历对象属性并添加readonly修饰符‌

Exclude<T, U>与Extract<T, U>的区别‌

    ‌Exclude‌：从T中移除U中的类型‌7。
    ‌Extract‌：保留T中与U匹配的类型‌7。
type T = Exclude<'a' | 'b' | 'c', 'a' | 'b'>;  // 'c'
type U = Extract<'a' | 1 | false, string>;      // 'a'

如何为第三方库扩展类型定义？‌
    使用声明合并（declare module）或编写.d.ts文件‌36。
typescriptCopy Code
// 扩展axios类型
declare module 'axios' {
  interface AxiosRequestConfig {
    retry?: number;
  }
}

如何避免this的类型丢失问题？‌

    显式声明函数中的this类型‌58。

typescriptCopy Code
interface User {
  name: string;
  greet(this: User): void;
}
const user: User = {
  name: 'Alice',
  greet() { console.log(this.name); }  // this类型明确为User
};


// 定义一个键为字符串、值为数字的对象类型
type Scores = Record<string, number>;
const examScores: Scores = { math: 90, english: 85 };
// 联合类型作为键
type Keys = "name" | "age";
type Person = Record<Keys, string | number>;
const user: Person = { name: "Alice", age: 25 };
适用场景‌：
    定义枚举值的映射关系。
    动态生成具有固定值类型的对象结构

// 从联合类型中排除特定类型
type AllowedKeys = "id" | "name" | "email";
type SensitiveKeys = Exclude<AllowedKeys, "email">; // "id" | "name"

// 排除基本类型
type Primitive = string | number | boolean;
type NonString = Exclude<Primitive, string>; // number | boolean
Exclude<T, U>‌
‌用途‌：从类型 T 中排除U 的类型。



interface User {
  id: number;
  name: string;
  password: string;
  email: string;
}

// 移除敏感字段（"password"）
type SafeUser = Omit<User, "password">;
// 等价于 { id: number; name: string; email: string }

// 移除多个字段
type PublicProfile = Omit<User, "password" | "email">;
// 等价于 { id: number; name: string }
‌适用场景‌：
    扩展接口时隐藏敏感字段。
    复用已有类型时剔除冗余属性。

Exclude vs Omit‌
    Exclude 操作的是 ‌联合类型‌，Omit 操作的是 ‌对象类型‌
type T1 = Exclude<"a" | "b" | "c", "a">;       // "b" | "c"
type T2 = Omit<{ a: 1; b: 2; c: 3 }, "a">;      // { b: 2; c: 3 }

