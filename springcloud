服务发现与配置管理面试题详解
一、‌服务发现核心机制‌

核心流程与机制‌
注册流程‌：服务提供者启动时向注册中心（如 Nacos、Eureka）发送注册请求，携带服务名、IP、端口等元数据。
健康检查‌：通过心跳机制（默认间隔 30s，超时 90s）监控服务状态，异常实例自动剔除。
服务拉取‌：消费者从注册中心拉取服务列表并缓存本地，后续调用基于本地缓存（减少注册中心压力）。

常见面试题‌
Q1：服务发现的核心作用？‌
答：解耦服务提供者与消费者，实现动态路由与负载均衡，避免硬编码地址。
Q2：Nacos 与 Eureka 的差异？‌
协议支持‌：Nacos 支持 HTTP/DNS/gRPC，Eureka 仅 HTTP。
数据一致性‌：Nacos 支持 AP（默认）和 CP 模式，Eureka 仅 AP。
Q3：服务剔除的触发条件？‌
答：未按时发送心跳、主动下线请求或注册中心主动健康检查失败。

二、‌配置管理核心机制‌
核心流程与机制‌
配置存储‌：配置中心（如 Nacos、Spring Cloud Config）集中管理配置项，支持多环境（dev/test/prod）隔离。
动态更新‌：客户端监听配置变更，通过长轮询或事件推送实时生效（无需重启服务）。
版本控制‌：支持历史版本回滚与配置差异对比，降低配置错误风险。

常见面试题‌
Q1：动态配置如何实现不重启生效？‌
答：客户端通过 @RefreshScope 注解（Spring Cloud）或监听器（Nacos）重新加载配置，结合本地缓存减少性能开销。
Q2：配置中心如何保证数据一致性？‌
Nacos‌：基于 Raft 协议实现集群数据同步（CP 模式）或异步复制（AP 模式）。
Spring Cloud Config‌：依赖 Git 仓库的版本控制能力，强一致性需结合消息总线（如 Spring Cloud Bus）。
Q3：多环境配置管理方案？‌
答：通过命名空间（Nacos）或 Profile（Spring Cloud）隔离不同环境配置，结合 Git 分支管理实现版本控制。
三、‌高频进阶问题‌

服务发现与负载均衡的协作‌

注册中心提供实例列表，客户端负载均衡器（如 Ribbon）基于策略（轮询、权重、随机）选择目标实例。

配置中心高可用设计‌
集群部署‌：Nacos 通过多节点集群 + 数据分片提升可用性。
容灾备份‌：定期快照备份配置数据，支持故障时快速恢复。

服务治理的扩展能力‌

动态路由‌：结合 API 网关（如 Spring Cloud Gateway）实现基于服务名的智能路由。
熔断降级‌：通过 Sentinel 或 Hystrix 监控服务健康状态，异常时触发熔断策略。
总结
模块‌	‌核心考点‌	‌关联技术栈‌
服务发现‌	注册/心跳/剔除机制、AP与CP模式对比、负载均衡协作	Nacos、Eureka、Consul
配置管理‌	动态更新原理、多环境隔离、数据一致性方案	Nacos、Spring Cloud Config



​灰度发布如何实现？
​步骤：
在 Gateway 中根据请求头（如 version）路由到不同服务版本

​配置中心：Spring Cloud Config + Bus 实现动态刷新

分布式追踪
11. ​Sleuth 如何生成 Trace ID？
​流程：
请求进入网关时生成唯一 Trace ID。
通过 HTTP Header 传递至下游服务。
Zipkin 收集并展示链路调用图。

过滤器类型：
​GatewayFilter：单个路由过滤器（如 AddRequestHeader）。
​GlobalFilter：全局过滤器（如鉴权、限流）。

​Feign 如何实现声明式服务调用？
​原理：通过动态代理生成接口实现类，结合 Ribbon 实现负载均衡。
