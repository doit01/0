package org.devlive.tutorial.multithreading.chapter05;

import java.util.concurrent.TimeUnit;

public class ObjectLockDemo {
    // 定义一个共享变量
    private int counter = 0;

    // 使用synchronized修饰实例方法，锁是当前对象(this)
    public synchronized void incrementSync() {
        counter++;
        System.out.println(Thread.currentThread().getName() + " - 计数器：" + counter);
        try {
            // 线程睡眠500毫秒，便于观察效果
            TimeUnit.MILLISECONDS.sleep(500);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    // 使用synchronized代码块，锁是当前对象(this)
    public void incrementSyncBlock() {
        synchronized (this) {
            counter++;
            System.out.println(Thread.currentThread().getName() + " - 计数器：" + counter);
            try {
                // 线程睡眠500毫秒，便于观察效果
                TimeUnit.MILLISECONDS.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        final ObjectLockDemo demo = new ObjectLockDemo();
        // 创建5个线程并发执行同步方法
        for (int i = 0; i < 5; i++) {
            new Thread(() -> {
                demo.incrementSync();
            }, "线程-" + i).start();
        }
    }
}



以下为你列举一些常见的 Java 锁机制面试题及参考答案：

### 基础概念类
1. **Java 中有哪些锁？它们的区别是什么？**
    - **按锁的作用范围**：
        - **对象锁**：作用于对象实例，通过 `object.lock()` 获取锁，作用于对象的同步代码块或方法。
        - **类锁**：作用于类级别，通过 `Class.forName().lock()` 获取锁，作用于静态方法或对类的全局同步。
    - **按锁的实现机制**：
        - **偏向锁**：JVM 在单线程环境下默认使用的锁，线程通过标记对象的 Mark Word 为自身 ID，快速获取和释放锁，无竞争时性能高。
        - **轻量级锁**：当多个线程竞争锁时升级为轻量级锁，使用 CAS 操作和自旋等待尝试获取锁，减少线程阻塞和唤醒开销。
        - **重量级锁**：线程竞争失败时进入阻塞状态，适合长时间等待场景，避免 CPU 资源浪费。
    - **按是否可重入**：
        - **可重入锁**：线程可多次获取同一锁，`synchronized` 和 `ReentrantLock` 是典型实现，需手动释放锁（`ReentrantLock` 必须手动释放，`synchronized` 代码执行完后系统自动释放）。
        - **不可重入锁**：线程重复获取锁会报错，如 `Lock` 接口的部分实现。
    - **按公平性**：
        - **公平锁**：线程按请求顺序获取锁，`ReentrantLock(true)` 可设置公平锁，减少饥饿现象但性能略低。
        - **非公平锁**：线程随机获取锁，`ReentrantLock(false)` 默认非公平，响应快但可能导致部分线程长期等待。
    - **按共享与独占**：
        - **独占锁**：仅允许一个线程访问资源，`synchronized` 和 `ReentrantLock` 默认独占。
        - **共享锁**：允许多个线程同时访问，如 `ReentrantReadWriteLock` 的读锁，适合高并发读场景。

2. **synchronized 关键字的作用和工作原理是什么？**
    - **作用**：用于实现同步操作，确保同一时间只有一个线程可以访问共享资源，保证线程安全。
    - **工作原理**：`synchronized` 是 JVM 层面的锁，通过 `monitor` 对象来完成。在锁对象的对象头里面有一个 `threadid` 字段，实现涉及到锁的升级，具体为无锁、偏向锁、自旋锁、重量级锁。在第一次访问的时候 `threadid` 为空，JVM 让其持有偏向锁，并将 `threadid` 设置为其线程 id，再次进入的时候会先判断 `threadid` 是否与其线程 id 一致，如果一致则可以直接使用此对象，如果不一致，则升级偏向锁为轻量级锁（只要有另一个竞争线程就升级），通过自旋循环一定次数来获取锁，执行一定次数之后，如果还没有正常获取到要使用的对象，此时就会把锁从轻量级升级为重量级锁。

3. **ReentrantLock 与 synchronized 相比有哪些优势？**
    - **可重入性**：两者都是可重入的，但 `ReentrantLock` 提供了更明确的可重入语义。
    - **公平性选择**：`ReentrantLock` 构造函数允许选择公平锁或非公平锁，而 `synchronized` 默认是非公平的。
    - **中断响应**：`ReentrantLock` 提供了 `lockInterruptibly()` 方法，允许在等待锁的过程中响应中断，而 `synchronized` 在等待锁时不会响应中断，除非线程调用了其他可以响应中断的方法。
    - **条件变量**：`ReentrantLock` 提供了 `Condition` 接口和 `newCondition()` 方法，可以实现更精细的线程同步和等待/通知机制，而 `synchronized` 只有一个与对象关联的等待队列和通知机制。
    - **锁的申请与释放**：`ReentrantLock` 必须手动释放锁（通常在 `finally` 块中），提供了更大的灵活性，但也增加了出错的可能性（如忘记释放锁），而 `synchronized` 在退出同步块或方法时自动释放锁。

### 应用场景类
1. **根据业务场景选择合适的锁有哪些？**
    - **高并发读取**：使用读写锁，允许多个线程同时读取，如 `ReentrantReadWriteLock`。
    - **简单同步**：使用 `synchronized`，简单易用。
    - **复杂锁操作**：使用 `ReentrantLock`，灵活控制锁。
    - **高性能读写**：使用 `StampedLock`，支持乐观读。

2. **在多线程环境中，如何确保数据的一致性和完整性？**
    - **使用锁机制**：通过 `synchronized`、`ReentrantLock` 等确保同一时间只有一个线程修改数据。
    - **原子类**：如 `AtomicInteger`，提供原子操作，避免多线程并发修改问题。
    - **不可变对象**：通过 `final` 修饰和不可变设计，确保对象状态不可修改。

### 原理与优化类
1. **synchronized 锁升级的原理是什么？**
在锁对象的对象头里面有一个 `threadid` 字段，在第一次访问的时候 `threadid` 为空，JVM 让其持有偏向锁，并将 `threadid` 设置为其线程 id，再次进入的时候会先判断 `threadid` 是否与其线程 id 一致，如果一致则可以直接使用此对象，如果不一致，则升级偏向锁为轻量级锁（只要有另一个竞争线程就升级），通过自旋循环一定次数来获取锁，执行一定次数之后，如果还没有正常获取到要使用的对象，此时就会把锁从轻量级升级为重量级锁。锁的升级的目的是减低了锁带来的性能消耗。

2. **如何避免锁竞争？**
    - **减少锁持有时间**：缩小同步代码块范围。
    - **使用非阻塞数据结构**：如 `ConcurrentHashMap`，减少锁使用。
    - **分段锁**：将共享资源分段，线程操作不同段时无需竞争。

3. **如何处理锁的死锁问题？**
    - **检测和预防**：定期检测线程状态，发现死锁时主动释放资源。
    - **按顺序获取锁**：多个锁时按统一顺序获取。
    - **使用 `tryLock()`**：尝试获取锁，失败时主动处理。


Java信号量（Semaphore）是Java并发编程中的一个同步辅助类，它主要用于控制同时访问特定资源的线程数量，信号量可以用来保护有限资源，以避免因资源竞争而导致的系统崩溃。下面为你介绍几个Java信号量的使用例子：
资源泄露和死锁问题
​资源泄露：当持有信号量许可的线程未能及时释放资源时，会导致该资源永远被占用，无法被其他线程使用。这种情况通常是由于线程在异常或提前结束时未能释放许可造成的。例如，在一个使用信号量控制数据库连接池访问的程序中，如果某个线程在获取连接后抛出异常，但没有释放连接许可，那么这个连接将一直被占用，其他线程无法使用，从而导致资源泄露。
​死锁：多个线程都在等待其他线程持有的资源，从而导致所有线程都处于永久的等待状态。在使用信号量时，死锁可能是因为线程的执行顺序不当、许可请求顺序不一致或者资源分配策略错误等原因造成的。比如，线程A持有信号量1的许可，同时试图获取信号量2的许可，而线程B持有信号量2的许可，同时试图获取信号量1的许可，那么就可能出现死锁。
​超时问题：当线程请求许可时，可能会由于资源竞争激烈导致长时间无法获得许可，最终导致超时。这在高并发的系统中尤为常见。超时问题可能会影响系统的性能和稳定性，特别是在对实时性要求较高的应用中，长时间的超时可能会造成服务质量的下
公平性问题

### 示例一：限制同时访问资源的线程数量
在这个示例中，我们创建了一个允许最多3个线程同时访问资源的`Semaphore`对象，创建了一个包含10个线程的线程池，并将任务提交到线程池。每个任务在访问资源之前都会尝试获取信号量的许可，如果无法获得许可，则线程将阻塞等待，当任务访问完资源后，它会释放信号量的许可，以便其他线程可以获取许可并访问资源。
```java
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

public class SemaphoreExample {
    private static final int MAX_THREADS = 3; // 允许同时访问资源的线程数量
    private static final Semaphore semaphore = new Semaphore(MAX_THREADS); // 创建信号量对象

    public static void main(String[] args) {
        ExecutorService executorService = Executors.newFixedThreadPool(10); // 创建一个固定大小的线程池
        for (int i = 0; i < 10; i++) {
            executorService.submit(new Task()); // 提交任务到线程池
        }
        executorService.shutdown(); // 关闭线程池
    }

    static class Task implements Runnable {
        @Override
        public void run() {
            try {
                semaphore.acquire(); // 获取许可
                System.out.println(Thread.currentThread().getName() + " is accessing the resource");
                Thread.sleep(2000); // 模拟访问资源耗时
                System.out.println(Thread.currentThread().getName() + " has finished accessing the resource");
            } catch (InterruptedException e) {
                e.printStackTrace();
            } finally {
                semaphore.release(); // 释放许可
            }
        }
    }
}
```

### 示例二：实现简单的登录队列
下面的示例实现了简单的登录队列，使用信号量来限制系统中的用户数量。`tryLogin`方法尝试获取许可证，如果成功则允许登录，`logout`方法释放许可证。
```java
import java.util.concurrent.Semaphore;

class LoginQueueUsingSemaphore {
    private Semaphore semaphore;

    public LoginQueueUsingSemaphore(int slotLimit) {
        semaphore = new Semaphore(slotLimit);
    }

    boolean tryLogin() {
        return semaphore.tryAcquire();
    }

    void logout() {
        semaphore.release();
    }

    int availableSlots() {
        return semaphore.availablePermits();
    }
}
```

### 示例三：模拟银行办理业务
在这个示例中，我们模拟了客户在银行办理业务的场景，银行有5个窗口，即最多允许5个客户同时办理业务。每个客户办理业务所需的时间是随机的。
```java
import java.util.Random;
import java.util.concurrent.Semaphore;

public class BankService {
    public static void main(String[] args) {
        Runnable customer = new Runnable() {
            final Semaphore availableWindow = new Semaphore(5, true);
            int count = 1;

            @Override
            public void run() {
                int time = (int) (Math.random() * 10 + 3);
                int num = count++;
                try {
                    availableWindow.acquire();
                    System.out.println("正在为第【" + num + "】个客户办理业务，需要时间:" + time + "s!");
                    Thread.sleep(time * 1000);
                    if (availableWindow.hasQueuedThreads()) {
                        System.out.println("第【" + num + "】个客户已办理完业务，有请下一位!");
                    } else {
                        System.out.println("第【" + num + "】个客户已办理完业务，没有客户了，休息中!");
                    }
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    availableWindow.release();
                }
            }
        };

        for (int i = 1; i <= 10; i++) {
            new Thread(customer).start();
        }
    }
}
```

### 示例四：限制文件服务器的并发连接数
假设有一个文件服务器只允许最多五个客户端连接上传文件，超过这个限额的新尝试将会被挂起等待其他客户断开连接后再继续。
```java
import java.util.concurrent.Semaphore;
import java.util.Random;

public class FileServer {
    private static final int MAX_CONNECTIONS = 5;
    private final Semaphore connectionLimiter = new Semaphore(MAX_CONNECTIONS, true);

    public void uploadFile(String fileName) throws InterruptedException {
        System.out.println(Thread.currentThread().getName() + " is trying to connect.尝试获取许可");
        connectionLimiter.acquire();
        try {
            System.out.println(Thread.currentThread().getName() + " connected and uploading file: " + fileName);
            // 模拟上传过程
            Thread.sleep(new Random().nextInt(2000));
            System.out.println(Thread.currentThread().getName() + " finished uploading.");
        } finally {
            connectionLimiter.release();
        }
    }
}
```

这些示例展示了Java信号量在不同场景下的使用方法，通过合理地使用信号量，可以确保程序在并发环境下的正确性和稳定性。


以下为你介绍一些常见的JVM优化面试题及参考答案：

### 基础概念类
1. **什么是JVM调优？**
JVM调优是指对Java虚拟机进行优化，以提高Java应用程序的性能和吞吐量。通过对JVM参数的调整、内存管理以及垃圾收集等方面的优化，可以使Java应用程序更加高效地运行。
2. **JVM内存模型包含哪些部分？**
JVM内存模型主要包括程序计数器、堆、本地方法栈、Java栈和方法区（JDK 1.7之后更改为元空间，并直接使用系统内存）。其中，堆用于存放对象实例，是垃圾回收的主要区域；方法区存储已被虚拟机加载的类信息、常量、静态变量等。
3. **什么是双亲委派机制及其作用？**
双亲委派机制指的是当一个类需要被加载时，它的加载请求会被委托给它的父类加载器，父类加载器会先尝试加载这个类，如果加载成功就返回，如果加载失败则会将加载请求再委托给它的父类加载器，直到最顶层的启动类加载器（Bootstrap ClassLoader）。只有当最顶层的启动类加载器也无法加载时，才会由当前类加载器自己来进行加载。使用该机制可以确保类的加载是由低层次的加载器向高层次的加载器进行委托，从而保证了类的唯一性和安全性，避免出现Java本地类被底层加载器加载的情况。

### 性能调优类
1. **什么情况下需要进行JVM调优？**
    - Heap内存（老年代）持续上涨达到设置的最大内存值。
    - Full GC次数频繁。
    - GC停顿（Stop World）时间过长（超过1秒，具体值按应用场景而定）。
    - 应用出现OutOfMemory等内存异常。
    - 应用出现OutOfDirectMemoryError等内存异常。
    - 应用中有使用本地缓存且占用大量内存空间。
    - 系统吞吐量与响应性能不高或下降。
    - 应用的CPU占用过高不下或内存占用过高不下。
2. **JVM调优有哪些常用策略？**
    - **调整JVM参数**：如设置初始堆大小（-Xms）、最大堆大小（-Xmx）、年轻代与老年代的比例（-XX:NewRatio）等。例如，一般将初始堆大小和最大堆大小设置为相同值，防止内存震荡和抖动。
    - **选择合适的垃圾回收器**：JVM提供了多种垃圾回收器，如Serial收集器、Parallel收集器、CMS收集器、G1收集器等。对于响应性要求高的应用程序，可以使用Serial收集器或CMS收集器；对于处理大量对象的批处理应用程序，可以使用Parallel收集器。
    - **优化类加载器性能**：避免创建过多的类加载器对象；将常用的类放在启动类加载器或扩展类加载器中，以避免重复加载；避免使用动态类加载。
    - **代码优化**：避免创建过多的临时对象；避免在GC期间进行I/O操作等。
3. **如何优化JVM的新生代和老年代大小？**
    - **新生代**：对象优先分配在Eden区，如果Eden区没有足够的空间进行分配时，虚拟机执行一次Minor GC。而那些无需回收的存活对象，将会进到Survivor的From区（From区内存不足时，直接进入Old区）。可以根据对象存活率和分配速率调整新生代大小，通常使用 -Xmn 参数设置新生代大小，也可通过 -XX:NewSize/-XX:MaxNewSize、-XX:NewRatio 来设置。
    - **老年代**：长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄计数器，当对象经过一定次数的Minor GC后，年龄达到阈值（默认15次），对象进入老年区。可以根据应用的长期存活对象数量调整老年代大小，一般使用 -Xmx 参数设置老年代的最大大小。

### 工具使用类
1. **JVM常用性能调优工具有哪些？**
    - **JConsole**：JDK自带的Java监控和管理平台，主要用于JVM内存和线程的监控，可以监控Java应用程序的CPU使用率、内存使用情况、线程数以及垃圾收集的频率和时间等。
    - **JVisualVM**：JDK中自带的可视化工具，可以查看本地应用以及远程服务器上应用程序的相关数据，还能捕获相关数据保存在本地以供后期分析，可进行性能分析以找出CPU和内存使用的瓶颈。
    - **MAT（Memory Analyzer Tool）**：一个基于Eclipse的内存分析工具，可用于分析堆转储文件，找出内存泄漏等问题。
2. **如何使用JVM工具进行性能问题检测？**
    - **jps**：JDK自带，用于列出系统中运行的所有Java进程。
    - **jinfo**：可列出端口号对应JVM的详细信息，包括JVM版本、操作系统和编码信息、虚拟机参数等。
    - **jstat**：用于打印JVM的内存使用情况，如使用 jstat -gc port 可查看指定端口号对应的JVM的垃圾回收统计信息。
    - **jstack**：用于追踪Java线程的资源使用情况，包括线程的名字、状态、调用的方法堆栈等，常用于查找具体的哪些Java线程在占用内存、CPU甚至出现死锁。
    - **jmap**：如使用 jmap -histo pid 可查看指定进程的JVM中加载了哪些类以及创建了多少对象；使用 jmap -dump:format=b,file=xxx.hprof pid 可将JVM转储为一个文件，方便后续分析。

### 故障处理类
1. **什么情况下会抛出OutOfMemoryError（OOM）？**
当JVM 98%的时间都花费在内存回收，并且每次回收的内存小于2%时，会触发OutOfMemoryException。此外，内存不足、内存泄露、加载过多类等情况也可能导致OOM。
2. **系统OOM之前都有哪些现象？**
每次垃圾回收的时间越来越长，Full GC的时间也变长；Full GC的次数越来越多；老年代的内存越来越大，并且每次Full GC后，老年代只有少量的内存被释放掉。
3. **如何进行堆Dump文件分析？**
可以通过指定启动参数 -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/app/data/ ，在发生OOM时自动生成堆转储文件。然后使用工具如MAT（Memory Analyzer Tool）来分析该文件，找出内存泄漏的根源。


springboot starter 自定义
1 create base project module
2 add meta data{
create meta-inf directory in src/main/resources/
add spring.factories file in which delares a auto configration class

spring.factories 
like org.springframework.boot.autoconfigure.EnableAutoConfiguration=\
com.example.starter.MyAutoConfiguration

}
3 write a autoconfration class using @ConditionalOnClass
@ConditionalOnMissingBean, @ConditionalOnProperty to set the condition
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConditionalOnClass({ MyService.class })
@EnableConfigurationProperties(MyProperties.class)
public class MyAutoConfiguration {
    @Autowired
    private MyProperties myProperties;

    @Bean
    @ConditionalOnMissingBean(MyService.class)
    public MyService myService() {
        return new MyServiceImpl(myProperties.getMessage());
    }
}

4 write the configration property class by using @ConfigurationProperties
it can bind the propties in configration yml file to the bean.

import org.springframework.boot.context.properties.ConfigurationProperties;

@ConfigurationProperties(prefix = "my.service")
public class MyProperties {
    private String message;

    // getters and setters...
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}

5 deploy it the nexus or maven central
服务发现与配置管理面试题详解
一、‌服务发现核心机制‌

核心流程与机制‌
注册流程‌：服务提供者启动时向注册中心（如 Nacos、Eureka）发送注册请求，携带服务名、IP、端口等元数据。
健康检查‌：通过心跳机制（默认间隔 30s，超时 90s）监控服务状态，异常实例自动剔除。
服务拉取‌：消费者从注册中心拉取服务列表并缓存本地，后续调用基于本地缓存（减少注册中心压力）。

常见面试题‌
Q1：服务发现的核心作用？‌
答：解耦服务提供者与消费者，实现动态路由与负载均衡，避免硬编码地址。
Q2：Nacos 与 Eureka 的差异？‌
协议支持‌：Nacos 支持 HTTP/DNS/gRPC，Eureka 仅 HTTP。
数据一致性‌：Nacos 支持 AP（默认）和 CP 模式，Eureka 仅 AP。
Q3：服务剔除的触发条件？‌
答：未按时发送心跳、主动下线请求或注册中心主动健康检查失败。

二、‌配置管理核心机制‌
核心流程与机制‌
配置存储‌：配置中心（如 Nacos、Spring Cloud Config）集中管理配置项，支持多环境（dev/test/prod）隔离。
动态更新‌：客户端监听配置变更，通过长轮询或事件推送实时生效（无需重启服务）。
版本控制‌：支持历史版本回滚与配置差异对比，降低配置错误风险。

常见面试题‌
Q1：动态配置如何实现不重启生效？‌
答：客户端通过 @RefreshScope 注解（Spring Cloud）或监听器（Nacos）重新加载配置，结合本地缓存减少性能开销。
Q2：配置中心如何保证数据一致性？‌
Nacos‌：基于 Raft 协议实现集群数据同步（CP 模式）或异步复制（AP 模式）。
Spring Cloud Config‌：依赖 Git 仓库的版本控制能力，强一致性需结合消息总线（如 Spring Cloud Bus）。
Q3：多环境配置管理方案？‌
答：通过命名空间（Nacos）或 Profile（Spring Cloud）隔离不同环境配置，结合 Git 分支管理实现版本控制。
三、‌高频进阶问题‌

服务发现与负载均衡的协作‌

注册中心提供实例列表，客户端负载均衡器（如 Ribbon）基于策略（轮询、权重、随机）选择目标实例。

配置中心高可用设计‌
集群部署‌：Nacos 通过多节点集群 + 数据分片提升可用性。
容灾备份‌：定期快照备份配置数据，支持故障时快速恢复。

服务治理的扩展能力‌

动态路由‌：结合 API 网关（如 Spring Cloud Gateway）实现基于服务名的智能路由。
熔断降级‌：通过 Sentinel 或 Hystrix 监控服务健康状态，异常时触发熔断策略。
总结
模块‌	‌核心考点‌	‌关联技术栈‌
服务发现‌	注册/心跳/剔除机制、AP与CP模式对比、负载均衡协作	Nacos、Eureka、Consul
配置管理‌	动态更新原理、多环境隔离、数据一致性方案	Nacos、Spring Cloud Config



​灰度发布如何实现？
​步骤：
在 Gateway 中根据请求头（如 version）路由到不同服务版本

​配置中心：Spring Cloud Config + Bus 实现动态刷新

分布式追踪
11. ​Sleuth 如何生成 Trace ID？
​流程：
请求进入网关时生成唯一 Trace ID。
通过 HTTP Header 传递至下游服务。
Zipkin 收集并展示链路调用图。

过滤器类型：
​GatewayFilter：单个路由过滤器（如 AddRequestHeader）。
​GlobalFilter：全局过滤器（如鉴权、限流）。

​Feign 如何实现声明式服务调用？
​原理：通过动态代理生成接口实现类，结合 Ribbon 实现负载均衡。
