jdk17 default gc is G1 
java -XX:+PrintCommandLineFlags -version
-XX:InitialHeapSize=16777216 -XX:MaxHeapSize=268435456 -XX:MinHeapSize=6815736 -XX:+PrintCommandLineFlags -XX:ReservedCodeCacheSize=251658240 -XX:+SegmentedCodeCache -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseSerialGC 
分区回收：G1将堆内存划分为多个Region，根据优先级进行回收，减少全局停顿时间。
并发和并行处理：G1支持并发标记和并发预处理，减少垃圾回收对应用的影响。

G1 的基本原理与核心设计

    Region 分区机制
    G1 将堆划分为多个大小相等的 Region（默认 2048 个），逻辑上分为 Eden、Survivor、Old 和 Humongous（大对象区）。通过动态调整回收优先级（标记垃圾最多的 Region 优先回收），实现低停顿目标38。
    并发标记与混合回收
        并发标记阶段：与应用程序并行执行，标记存活对象，避免全堆停顿48。
        混合回收（Mixed GC）：回收年轻代 Region 和部分老年代 Region，避免老年代完全回收（非 Full GC）38。

2. 如何实现可预测的停顿时间？

    停顿时间模型：通过 -XX:MaxGCPauseMillis 设定目标停顿时间（默认 200ms），G1 根据历史回收数据动态调整 Region 回收数量和顺序，优先处理垃圾比例高的 Region38。
    增量回收：将回收任务拆分为多个小阶段（如初始标记、并发标记、重新标记、清理），分批次完成，避免单次长时间停顿48。

3. Region 设计的优势

    内存利用率高：支持动态分配 Region 类型（如 Eden→Survivor→Old），避免传统分代模型的内存浪费38。
    并行与并发优化：多个回收线程可同时处理不同 Region，降低线程竞争，提升吞吐量38。

4. Mixed GC 的触发条件与流程

    触发阈值：当老年代占用堆比例达到 -XX:InitiatingHeapOccupancyPercent（默认 45%）时触发48。
    执行流程：
        初始标记（STW）：标记根对象，伴随一次年轻代 GC8。
        并发标记：并行标记存活对象8。
        最终标记（STW）：修正并发标记期间变动的对象引用8。
        筛选回收（Evacuation）：复制存活对象到空闲 Region，清理垃圾 Region48。

5. G1 与 CMS 的核心区别
特性 	G1 	CMS
算法 	标记-整理（整体） + 复制（局部） 	标记-清除
内存模型 	Region 逻辑分区 	物理分代（年轻代 + 老年代）
停顿时间 	可控（可预测模型） 	不可控（依赖堆碎片情况）
适用场景 	大堆、低延迟需求 	中小堆、高吞吐需求
内存碎片处理 	通过 Region 复制整理减少碎片 	需 Full GC 整理碎片
引用 	34 	34
6. 大对象（Humongous）处理机制

    定义：对象大小超过 Region 50% 则判定为大对象，分配在连续的 Humongous Region38。
    回收策略：在年轻代 GC 或 Mixed GC 中回收无引用的大对象，避免占用过多连续空间38。

7. 调优关键参数

    目标停顿时间：-XX:MaxGCPauseMillis=200（单位：ms）38。
    混合回收阈值：-XX:InitiatingHeapOccupancyPercent=45（老年代占用堆比例）48。
    Region 大小：-XX:G1HeapRegionSize=2M（建议为 1MB~32MB，需为 2 的幂）48。

8. Full GC 触发条件及应对

    触发场景：
        Mixed GC 回收速度跟不上对象分配速度，导致老年代占满8。
        并发标记失败（如堆内存不足）8。
    优化方案：
        增大堆内存或降低 -XX:InitiatingHeapOccupancyPercent8。
        避免频繁大对象分配，减少 Humongous Region 碎片38。

9. 适用场景与局限性

    适用场景：
        堆内存 ≥ 6GB，需低延迟（如实时交易系统）38。
        对停顿时间敏感的应用（如金融、游戏服务）48。
    局限性：
        小堆场景性能可能不如 CMS/Parallel GC34。
        内存占用较高（需维护 Region 元数据）

String.intern() 方法的作用
将字符串对象添加到常量池：
调用 intern() 方法时，若字符串常量池中已存在内容相同的字符串，则直接返回池中的引用；若不存在，则将该字符串对象添加到池中，并返回池中的引用。 

String s1 = new String("abc");  // 堆中创建新对象
String s2 = s1.intern();        // 返回常量池中的 "abc" 引用
System.out.println(s1 == s2);   // false（s1在堆，s2在池）

String s3 = "abc";              // 直接使用常量池
System.out.println(s2 == s3);   // true（两者均指向池中同一对象）
 内存优化原理
    减少重复字符串的内存占用：
通过 intern() 可强制将字符串放入常量池，避免重复字符串在堆中创建多个对象
/ 未使用 intern()
String a = new String("hello");  // 堆中对象
String b = new String("hello");  // 堆中另一个对象
System.out.println(a == b);      // false

// 使用 intern()
String c = new String("world").intern();  // 池中对象
String d = "world";                       // 池中同一对象
System.out.println(c == d);               // true
字符串常量池移至 堆内存，允许通过垃圾回收管理未引用的常量字符串，减少内存泄漏风险。
适用场景

    大量重复字符串处理：如解析 CSV/JSON 数据时，对重复字段值调用 intern() 可显著减少内存占用。
    高频字符串比较：若需频繁使用 equals() 比较字符串内容，可先调用 intern() 后用 == 比较引用，提升性能（需权衡池化开销）。

注意事项

    性能开销：intern() 的底层实现依赖哈希表（Java 7+ 使用 ConcurrentHashMap），高并发场景下可能成为瓶颈。
    内存风险：过度池化唯一字符串（如 UUID）会导致常量池膨胀，反而增加内存压力。
    版本差异：Java 6 的常量池容量固定（默认 1009），易触发 OutOfMemoryError；Java 7+ 支持动态扩展。
核心目的：通过字符串常量池复用相同内容的字符串，节省内存。
适用场景：处理大量重复字符串时（如日志分析、数据解析）。
避坑指南：避免池化唯一或动态生成的字符串，优先在 Java 7+ 中使用。
性能权衡：在内存节省与池化开销之间找到平衡点。


类加载的三个阶段

    加载：通过全限定名获取二进制字节流（Class 文件），将静态结构转换为方法区的运行时数据结构，并在堆中生成 java.lang.Class 对象作为访问入口36。
    验证：检查字节码是否符合 JVM 规范（如魔数、版本号、常量池合法性），确保无安全漏洞36。
    准备：为类变量（static 变量）分配内存并设置初始值（如 int 初始化为 0，final 直接赋常量池值）35。

连接与初始化

    解析：将符号引用（如类名、方法名）转换为直接引用（内存地址）78。
    初始化：执行 <clinit> 方法（静态变量赋值、静态代码块），是类加载的最后一步

类加载器与双亲委派模型

    类加载器分类
        启动类加载器（Bootstrap ClassLoader）：加载 JRE/lib 下的核心类库（如 rt.jar）27。
        扩展类加载器（Extension ClassLoader）：加载 JRE/lib/ext 目录的扩展类26。
        应用类加载器（Application ClassLoader）：加载用户类路径（ClassPath）的类26。
        自定义类加载器：继承 ClassLoader，重写 findClass() 实现动态加载（如热部署、加密解密）27。

    双亲委派机制
        流程：子类加载器收到请求后，优先委派父类加载器处理，父类无法完成时才由子类加载26。
        优点：避免类重复加载，保护核心类库安全（如防止自定义 java.lang.String 覆盖 JVM 实现
必须立即初始化的 5 种情况

    使用 new 实例化对象、读取/设置类的静态字段、调用类的静态方法67。
    反射调用类（如 Class.forName()）且类未初始化67。
    初始化子类时发现父类未初始化（先触发父类初始化）67。
    JVM 启动时指定的主类（包含 main() 方法的类）78。
    JDK 动态语言支持（如 Lambda 表达式涉及的类）

如何打破双亲委派模型？
    场景：Tomcat 为隔离不同 Web 应用的类，每个应用使用独立类加载器27。
    方法：重写 loadClass() 方法，直接加载特定类（如 SPI 服务发现）
类卸载条件

    类的所有实例已被回收。
    类的 Class 对象未被引用。
    加载该类的类加载器已被回收
JVM 如何加载动态生成的类？
    通过 ByteArrayOutputStream 生成字节码，调用 defineClass() 方法动态加载
热部署实现原理
    自定义类加载器加载修改后的类，旧类无引用后由垃圾回收器回收，新类生效



一、JMM 核心概念

    内存划分与交互规则
        主内存：存储所有共享变量（如类静态变量、实例对象），所有线程均可访问15。
        工作内存：线程私有，存储主内存变量的副本，线程操作变量需先拷贝至工作内存，修改后同步回主内存15。
        交互操作：read（从主内存读取）、load（加载到工作内存）、use（使用）、assign（赋值）、store（存储回主内存）、write（主内存更新）58。

    三大特性
        原子性：基本类型（int、boolean 等）的读写操作不可分割（long/double 在 32 位系统中非原子）58。
        可见性：volatile 保证变量修改后立即刷新到主内存，其他线程可见；synchronized 和 final 也能实现可见性15。
        有序性：volatile 禁止指令重排序，synchronized 通过锁保证代码块串行执行15。

    先行发生原则（Happens-Before）
        程序顺序规则、锁规则（解锁先于加锁）、volatile 规则（写先于读）、线程启动规则（start() 先于线程代码）、传递性规则等

状态转换：新建（NEW）→ 就绪（RUNNABLE）→ 运行（RUNNING）→ 阻塞（BLOCKED/WAITING）→ 终止（TERMINATED）36。
阻塞场景：等待锁（synchronized）、Object.wait()、Thread.sleep()、IO 操作等37。

同步机制

    synchronized：基于对象监视器锁（Monitor），修饰代码块或方法，保证原子性和可见性57。
    ReentrantLock：可中断、支持公平锁、绑定多个条件变量（Condition），需手动释放锁78。
    volatile：仅保证可见性和有序性，不保证复合操作原子性（
原子类与 CAS
    AtomicInteger 等：基于 CAS（Compare-And-Swap）实现无锁原子操作，避免线程阻塞57。
    CAS 问题：ABA 问题（可通过版本号解决）、自旋开销
避免死锁策略
    按固定顺序获取锁、设置锁超时（tryLock）、死锁检测（如 JStack 分析

线程不安全场景

    复合操作：非原子操作（如 HashMap 并发扩容）导致数据丢失或覆盖47。
    对象逃逸：未正确同步的共享对象被多线程修改（如未加锁的 ArrayList 并发添加元素
ReentrantLock 对比 synchronized
特性 	synchronized 	ReentrantLock
锁获取方式 	JVM 隐式管理 	需手动 lock() 和 unlock()78
公平性 	非公平锁（默认） 	支持公平锁与非公平锁27
条件变量 	不支持 	       支持多个 Condition78
可中断性 	不可中断 	支持 lockInterruptibly()

    减少锁竞争
        缩小锁粒度：使用分段锁（如 ConcurrentHashMap）或细粒度锁（如只锁共享变量）27。
        无锁编程：基于 CAS 的原子类（如 AtomicInteger）实现线程安全78。

    锁消除与锁粗化
        锁消除：JIT 编译器对不可能存在竞争的锁进行消除（如局部对象锁）27。
        锁粗化：合并多个相邻锁操作，减少频繁加锁/解锁的开销27。

    避免死锁
        固定顺序加锁：按全局统一顺序获取多把锁（如按 hash 值排序）78。
        超时机制：使用 tryLock(timeout) 避免无限等待（如 ReentrantLock 支持）78。

四、高频进阶问题

    如何实现线程安全的单例模式？
        双重检查锁（DCL）：结合 volatile 禁止指令重排序，保证单例唯一性27。

        javaCopy Code
        public class Singleton {
            private volatile static Singleton instance;
            public static Singleton getInstance() {
                if (instance == null) {
                    synchronized (Singleton.class) {
                        if (instance == null) {
                            instance = new Singleton();
                        }
                    }
                }
                return instance;
            }
        }

    CAS 的 ABA 问题如何解决？
        版本号机制：使用 AtomicStampedReference 记录变量修改版本号，避免值被其他线程修改后恢复原值78。

    线程池如何避免资源耗尽？
        参数配置：合理设置核心线程数、最大线程数、队列容量及拒绝策略（如 ThreadPoolExecutor.AbortPolicy）57。

五、实战调优案例

    高并发计数器优化
        场景：多线程频繁累加计数器导致性能瓶颈。
        优化：使用 LongAdder 替代 AtomicLong，通过分段累加减少 CAS 竞争78。
　java.util.concurrency.atomic.LongAdder是Java8新增的一个类，提供了原子累计值的方法。根据文档的描述其性能要优于AtomicLong
在Java8下直接采用LongAdder，但是AtomicLong的一系列方法不仅仅可以自增，还可以获取更新后的值，如果是例如获取一个全局唯一的ID还是采用AtomicLong会方便一点
高并发下N多线程同时去操作一个变量会造成大量线程CAS失败，然后处于自旋状态，导致严重浪费CPU资源，降低了并发性。既然AtomicLong性能问题是由于过多线程同时去竞争同一个变量的更新而降低的，那么如果把一个变量分解为多个变量，让同样多的线程去竞争多个资源。
 　　LongAdder则是内部维护一个Cells数组，每个Cell里面有一个初始值为0的long型变量，在同等并发量的情况下，争夺单个变量的线程会减少，这是变相的减少了争夺共享资源的并发量，另外多个线程在争夺同一个原子变量时候，如果失败并不是自旋CAS重试，而是尝试获取其他原子变量的锁，最后当获取当前值时候是把所有变量的值累加后再加上base的值返回的


    死锁检测与排查
        工具：通过 jstack 导出线程堆栈，分析线程阻塞链；或使用 Arthas 在线诊断工具定位死锁78。

总结

线程安全与锁优化的核心在于 平衡性能与安全，需重点掌握：

    synchronized 锁升级机制及适用场景27。
    ReentrantLock 的灵活特性（如公平锁、条件变量）78。
    锁优化策略（如无锁编程、锁消除/粗化）27。
    面试中可结合源码（如 AbstractQueuedSynchronizer 实现）和实际案例（如高并发计数器、死锁排查）深入阐述。

组件通信方式

    父子：props + $emit14。
    兄弟/跨级：事件总线（Event Bus）、provide/inject、Vuex/Pinia45。
    Vue 3 新增：defineProps、defineEmits 编译器宏2。

插槽（Slots）类型

    默认插槽、具名插槽、作用域插槽（可通过 v-slot 传递数据）17。

动态组件与异步组件

    <component :is> 实现动态组件，搭配 keep-alive 缓存状态14。
    defineAsyncComponent 实现异步加载组件（Vue 3）

路由懒加载（() => import()）17。
第三方库按需引入（如 Lodash 的 lodash-es）23
Vue 的异步更新机制
数据变化后，Vue 将更新任务推入队列，通过 nextTick 在下次 DOM 更新后触发回调34。

Vue Router 导航守卫

    全局守卫：beforeEach、beforeResolve、afterEach17。
    组件内守卫：beforeRouteEnter、beforeRouteUpdate17。

Vuex 核心概念
    state（状态）、mutations（同步修改）、actions（异步提交）、getters（计算属性）17。
如何优化一个包含 10 万行数据的表格组件的渲染性能？
    参考答案：
        使用虚拟滚动（如 vue-virtual-scroller）仅渲染可视区域。
        禁用深层响应式（shallowRef/shallowReactive）减少初始化开销。
        分页或分块加载（requestIdleCallback）。

Vue 3 的静态提升（Static Hoisting）和补丁标记（Patch Flags）是如何减少渲染开销的？
    期望答案：
        静态提升：将纯静态节点提取到渲染函数外，避免重复创建。
        补丁标记：在虚拟 DOM 比对时通过标志位跳过静态内容，仅对比动态部分

如何设计一个支持撤销/重做（Undo/Redo）的 Vue 状态管理方案？
    参考答案：
        使用 Pinia 或自定义 Store，通过快照数组记录状态变更历史。
        结合 Command 模式 封装原子化操作。
        使用 watch 或 effect 自动跟踪变更

如何实现动态路由权限控制（如根据角色加载不同路由）？

    方案：        路由守卫中异步获取用户权限，动态调用 router.addRoute()。
        使用 Vue Router 的 meta 字段标记路由权限

持久化：提供 RDB（快照）和 AOF（日志追加）
数据类型 	支持复杂结构（如 ZSet、Geo） 	
线程模型 	单线程（IO 多路复用）
RDB：

    原理：定时生成内存快照（二进制文件），恢复速度快。
    缺点：可能丢失最后一次快照后的数据 37。

    原理：记录写操作命令（追加日志），支持每秒同步/每次操作同步。
    缺点：文件体积大，恢复速度慢 37。

缓存穿透（查询不存在的数据）：
    方案：布隆过滤器拦截非法请求 + 缓存空值 46。

缓存击穿（热点 key 过期后高并发请求直接冲击数据库）：
    方案：互斥锁（SETNX）重建缓存或设置逻辑过期时间 47。

缓存雪崩（大量 key 同时过期或 Redis 宕机）：
    方案：随机化过期时间 + 集群高可用（主从/哨兵）
Redis 分布式锁实现
核心命令：SET key value NX EX（原子性操作避免死锁）78。
    缺陷：
        锁超时：业务执行时间超过锁过期时间需用“看门狗”机制续期（如 Redisson）7。
        集群脑裂：主从切换可能导致锁失效，需用 Redlock 算法
计数器：String 类型的 INCR/DECR 命令实现原子计数 25。
排行榜：ZSet 的 ZRANGEBYSCORE 命令实现动态排序 13。
消息队列：List 的 LPUSH/BRPOP 实现简单队列（替代 Kafka 轻量级场景
Redis 主从复制流程

    全量同步：从节点首次连接主节点，接收 RDB 文件并加载 36。
    增量同步：主节点将写命令写入复制缓冲区，从节点持续接收增量数据 38。

Redis 单线程模型优势

    高性能原因：
        无锁竞争，减少上下文切换开销。
        基于 IO 多路复用（Epoll）处理海量连接

处理超过内存容量的日志文件

•  自动配置原理
•	条件注解：通过@ConditionalOnClass等条件判断是否加载Bean
•	SPI机制：从META-INF/spring.factories加载自动配置类
•	覆盖配置：使用application.properties或自定义配置类覆盖默认行为
•  如何实现独立运行（无需外部服务器）
•	打包为可执行JAR：依赖spring-boot-maven-plugin插件14

Spring Boot Starter的作用及自定义Starter开发步骤
•	作用：封装依赖和配置（如spring-boot-starter-web集成Web开发所需库）16
•	开发步骤： 
1.	创建META-INF/spring.factories定义自动配置类
2.	使用@Conditional条件注解控制Bean加载
自动配置的实现原理与调试方法
•	原理： 
o	@EnableAutoConfiguration触发AutoConfigurationImportSelector加载spring.factories中的配置类67
o	条件注解（如@ConditionalOnClass）动态判断是否生效5

solution高并发高性能
线程池与异步编程
无锁并发与原子操作
•	CAS机制：利用AtomicInteger、LongAdder等原子类替代synchronized，降低锁竞争开销3。
•	并发容器优化：优先选择ConcurrentHashMap、CopyOnWriteArrayList，避免显式加锁

分布式缓存：Redis预减库存（秒杀场景） + 本地缓存（Caffeine）两级架构，减少数据库穿透
// Redis预减库存示例  
Long stock = redisTemplate.opsForValue().decrement("product:1001");  
if (stock < 0) throw new RuntimeException("库存不足");  

流量管控与负载均衡
•	限流熔断：采用令牌桶算法（RateLimiter）或Sentinel动态控制QPS，防止系统过载7。
•	Nginx反向代理：基于权重/一致性哈希分发请求，配合多Tomcat节点横向扩展


异步消息与分库分表
•	MQ解耦削峰：通过RocketMQ/Kafka异步处理订单创建、日志写入等高延迟操作7。
•	数据库分片：按用户ID散列分库（如ShardingSphere），提升MySQL并发写入能力

高性能网络模型
•	Netty非阻塞I/O：使用Epoll+Reactor模式支撑10万级长连接（如IM场景）5。
•	虚拟线程（Loom）：Java 21+虚拟线程替代传统线程池，降低上下文切换开销3。
方案
适用场景	QPS上限	延迟（ms）
线程池+异步编程	通用业务逻辑	10万~50万	1~10
Netty非阻塞I/O	高并发网络通信	50万~100万	0.1~5
Redis缓存+分库分表	秒杀/高写入场景	100万+	5~20

•	QPS（Query Per Second）：每秒请求处理量，是衡量系统并发能力的核心指标，计算公式为：QPS = 并发数 / 平均响应时间6。
•	关键影响因素： 
o	Web容器配置：Tomcat默认线程池（如Spring Boot默认20线程）直接影响并发上限45；
o	业务逻辑复杂度：数据库操作、外部接口调用等耗时操作显著降低QPS16；
o	硬件与架构：单机部署与分布式集群的性能差异可达10倍以上36。
________________________________________
二、不同场景下的QPS典型值
1.	基础Web服务（无高并发优化）
o	单机Spring Boot应用：默认Tomcat配置（20线程）下，QPS约为500-100045；
o	优化后（调整线程池+异步处理）：通过扩大线程池（如200线程）及非阻塞I/O，QPS可提升至2000-500013。
2.	高并发场景（秒杀/抢购）
o	单机极限：结合Redis缓存预减库存+RocketMQ削峰，QPS可达1万-5万36；
o	分布式集群：通过水平扩展（如10节点集群）及分库分表，QPS可突破50万38。
3.	高性能网络服务（IM/实时通信）
o	Netty框架：基于非阻塞I/O模型，单机QPS可达10万-50万58；
o	虚拟线程（Loom）：Java 21+虚拟线程进一步降低上下文切换开销，QPS提升20%-50%58。
________________________________________
三、QPS优化路径
1.	硬件/架构层
o	垂直扩展：升级CPU/内存，提升单机处理能力（如采用云服务器弹性配置）16；
o	水平扩展：通过Nginx负载均衡+多节点集群分散压力58。
2.	技术栈优化
o	静态化与缓存：CDN加速静态资源+Redis缓存热点数据，减少动态请求比例68；
o	异步处理：使用RocketMQ/Kafka异步解耦耗时操作（如订单创建、日志写入）38。
3.	代码级调优
o	线程池参数调整：根据压测结果动态设置maxThreads和maxConnections（如Tomcat线程数提升至200）45；
o	数据库优化：索引优化+批量操作+连接池（如HikariCP）减少DB响应时间16。
________________________________________
四、典型系统QPS参考表
场景
QPS范围	关键技术支撑
普通企业官网	100-500	单机Spring Boot+MySQL45

电商促销活动	1万-10万	Redis+RocketMQ集群38

金融实时交易系统	50万+	Netty+分布式缓存+FPGA加速



轻量级协议：头部仅2字节，适用于低带宽、高延迟的物联网（IoT）环境；
发布/订阅模式：支持一对多通信，发布者与订阅者解耦；
服务质量（QoS）：提供三种消息传递保证（0-最多一次，1-至少一次，2-恰好一次），确保不同场景下的可靠性。

MQTT与HTTP对比

通信模式：HTTP为请求/响应模式，MQTT基于发布/订阅，支持异步通信；
资源消耗：MQTT消息体积更小（典型消息仅几字节），节省设备功耗；
适用场景：HTTP适合网页交互，MQTT专为IoT设备间高频低功耗通信设计。
二、协议机制与实现细节

QoS级别与应用场景

QoS 0：适用于传感器数据上报（如温度监测），允许偶发数据丢失；
QoS 1：用于设备控制指令（如开关操作），确保指令必达但可能重复；
QoS 2：金融交易等场景，通过四次握手保证消息唯一性，牺牲部分性能。

消息保留（Retained Message）

机制：Broker保存主题最新一条消息，新订阅者立即获取；
应用：设备状态同步（如获取灯泡最新开关状态）。
遗嘱消息（Last Will）
作用：客户端异常断开时，Broker自动发布预设消息，用于故障报警；
配置示例：
java
Copy Code
MqttConnectOptions options = new MqttConnectOptions();  
options.setWill("device/status", "offline".getBytes(), 2, true);  

三、实际应用与优化
高并发IoT场景设计

Broker集群：通过多个MQTT Broker节点水平扩展，支撑百万级设备连接；
主题分片：按设备ID哈希分配主题（如sensor/{deviceId}/data），避免单点瓶颈。

安全机制
认证：基于Token或X.509证书验证设备身份；
加密：TLS 1.3加密通信，防止中间人攻击。

故障排查与监控
持久会话（Clean Session）：客户端重连后恢复未确认消息（需设置CleanSession=false）；
监控指标：通过Broker暴露的Metrics接口跟踪连接数、消息吞吐量及延迟。
四、高频面试问题示例
Q: 如何避免MQTT消息重复消费？
A: 结合QoS 2+唯一消息ID去重，或在业务层实现幂等性校验。
Q: MQTT 5.0相比3.1.1的主要改进？
A: 新增响应主题、原因码、共享订阅等功能，提升扩展性和错误诊断能力。
Q: 消息积压如何处理？
A: 动态扩展消费者，或启用Broker的消息分片存储（需兼容性支持）。

Pg
隔离性：通过MVCC（多版本并发控制）实现读写不阻塞，支持不同事务隔离级别（如读已提交、可重复读
常用索引：B-Tree（默认）、Hash（等值查询）、GiST（地理数据）、BRIN（范围数据）
•  流复制：基于WAL日志同步主从数据，支持同步/异步模式 
•  逻辑复制：按表级别复制，支持跨版本数据迁移
分区表与分片
•	分区策略：Range（时间范围）、List（离散值）、Hash（均匀分布）
•	性能优化：分区剪枝（Partition Pruning）减少查询扫描范围
EXPLAIN命令：分析执行计划，识别全表扫描或低效索引
PgBouncer：连接池工具，减少短连接开销
•  VACUUM机制：清理死元组，防止表膨胀，支持自动VACUUM配置35； 
•  监控指标：连接数、锁等待、WAL生成速率

•  物理备份：pg_basebackup全量备份+WAL归档增量恢复
•  逻辑备份：pg_dump导出表结构及数据，支持并行导出
窗口函数：使用ROW_NUMBER()或RANK()实现分组排序
锁冲突：通过pg_locks视图定位阻塞事务
死锁处理：设置死锁超时参数deadlock_timeout，自动回滚事务

MVCC如何避免读写冲突？
A: 通过事务ID（XID）标记数据版本，读操作访问快照版本，写操作生成新版本，实现非阻塞并发 
•  Q: 如何实现跨分区表查询优化？
A: 使用声明式分区（Partitioned Table）结合分区键索引，确保查询命中特定分区


Kafka与传统消息队列的差异

架构模式：Kafka采用发布/订阅模型，支持多消费者重复消费；RabbitMQ等传统队列多为点对点模式，消息消费后即删除。
吞吐量：Kafka单Broker支持百万级QPS，传统队列（如RabbitMQ）通常在十万级。
数据持久化：Kafka消息默认存储7天，支持TB级数据积累；传统队列多为内存缓存，易丢失。

每秒处理几十万消息，延迟几毫秒。
容错性：若副本数n，允许n-1个节点失败。
高并发：支持数千个客户端同时读写。
一个topic 对 多个partition，consummer group对多个partition。Partition的每个消息只能被consumer group中的一个consumer消费。可以启动多个group来重复消费。
同一组的consumer的消费必须顺序（consumer要维护上次读到哪个offset）读取partition的message。如果觉得效率不高，可以扩展partition，再加新的consumer thread消费。
最优设计：consumer group的consumer thread数量=partition数量，效率最高。
Consumer rebalance触发条件：1 consumer 增减 ，2 broker，partition增减

消息有一个定长header和变长字节组成。，一般在1-10k之间，推荐不超过1M。
支持批量发消息。根据配置不管消费未消费，会保存一定时间。过期才删除。
磁盘空间增大不影响性能。
Producer直接发消息到broker的leader partition，不需经过任何中介。So kafka集群的每个broker都可以相应producer，并返回topic的元信息，包括哪些机器是活的，topic的leader partition在哪…. Producer根据用户定义的partition key ，可以实现hash分区算法，如相同的userid的消息推到同一个partition。也可以随机分配。
也可batch推送，如累计的消息数量，时间间隔，累计数据大小。通过batch 减少网络请求，磁盘IO ,如果途中丢失,或是一个broker挂了,可以重发.(等待所有备份节点接收到消息)



Kafka高可用性实现
Relication策略基于partition,而不是topic。Leader处理所有的读写情况。Leader跟踪follwer状态，如果follwer落后太多或者失效，会被leader从replicas同步列表删除。 
如果所有副本都down了，kafka选择所有节点中（不只是ISR）第一个恢复的节点作为leader。
分区副本机制：每个Partition包含Leader和多个Follower副本，Leader(保存其他备份节点列表,并维护备份状态同步)故障时自动切换。
Leader先收到producer的消息，再发给其他的follower。

ISR列表：仅同步副本（In-Sync Replicas）参与选举，确保数据一致性。

生产者消息可靠性保障
ACK参数：
acks=0：不等待确认，可能丢失数据；
acks=1：Leader写入即确认；
acks=all：所有ISR副本确认。

消费者组与Rebalance机制
分区分配策略：Range（按范围分配）、RoundRobin（轮询分配）。
触发条件：消费者加入/退出、新增分区、心跳超时。

Offset管理
提交方式：自动提交（可能重复消费） vs 手动提交（需处理幂等性）。
__consumer_offsets：内部Topic存储消费进度，支持压缩日志优化查询。
三、运维与性能优化

数据丢失场景与规避
生产者侧：启用重试机制（retries=3）和幂等性（enable.idempotence=true）。
Broker侧：设置min.insync.replicas=2，防止单副本写入导致数据丢失。

吞吐量优化策略
批量发送：调整linger.ms（等待时间）和batch.size（批量大小）。
压缩算法：使用Snappy或LZ4减少网络传输开销。

监控与故障排查
指标：
Lag：消费者落后消息数（需监控告警）；
ISR波动：副本同步异常。
工具：Kafka Manager、Prometheus+Grafana。
四、高频进阶问题

Kafka事务消息实现原理
两阶段提交：通过Transaction Coordinator协调生产者与Broker，保障跨分区原子性。

如何实现Exactly-Once语义
幂等生产者+事务：结合enable.idempotence和事务API，确保消息不重复不丢失。

Kafka与流处理整合
Kafka Streams：提供窗口计算、状态存储等API，支持实时流处理。
五、场景设计题
设计千万级设备日志采集系统
分区策略：按设备ID哈希分配，避免热点；
压缩存储：启用Log Compaction清理重复Key。

消息积压应急方案
扩容消费者：增加消费者实例并行处理；
跳过非关键数据：重置Offset至最新位置。

2025年Kafka进阶
一、核心机制与设计原理

Kafka的零拷贝（Zero-Copy）实现原理

技术细节：通过sendfile系统调用绕过用户空间缓冲区，直接将内核页缓存数据传输到网卡，减少CPU与内存拷贝次数，提升吞吐量。
应用场景：适用于日志传输、实时数据管道等高吞吐场景。

Kafka的稀疏索引（Sparse Index）设计

作用：每个日志分段（Log Segment,包括.index索引文件 .log数据文件）仅记录部分消息的偏移量索引，降低索引文件体积，加速消息定位。Segment文件名为上一个全局partition的最大offset
查询优化：通过二分查找快速定位目标消息所在的分段和位置。
二、消费者与流处理

消费者提交Offset的两种模式

自动提交：定时提交（enable.auto.commit=true），可能导致重复消费或消息丢失。
手动提交：同步提交（commitSync）确保强一致性，异步提交（commitAsync）提升吞吐但可能丢失提交。

Kafka Streams的Exactly-Once实现

机制：结合生产者幂等性、事务API及消费者自动提交偏移量，实现端到端精确一次处理。
限制：仅适用于Kafka内部数据流，跨系统需额外协调。
三、运维与调优

如何诊断消费者延迟（Lag）问题

工具：使用kafka-consumer-groups.sh查看Lag，结合Prometheus监控消费者组状态。
优化手段：增加消费者实例、调整fetch.min.bytes减少拉取频率。

Kafka与ZooKeeper的依赖关系演变

Kafka 3.0+变化：逐步移除ZooKeeper依赖，引入KRaft元数据管理模块，提升集群扩展性。
遗留作用：旧版本中仍依赖ZooKeeper管理Broker注册、Topic配置等。
四、场景设计与综合问题

设计一个跨数据中心Kafka集群同步方案

方案：
MirrorMaker 2.0：异步复制数据，支持故障转移和Topic自动同步。
网络优化：启用压缩（如LZ4）、调整replica.fetch.max.bytes减少跨机房带宽压力。

Kafka在云原生环境下的挑战与优化

挑战：动态IP导致Broker注册异常、存储卷性能瓶颈。
优化：使用StatefulSet管理Pod、本地SSD存储提升IOPS。

参考答案示例

Q: 如何保证Kafka集群的跨版本升级兼容性？
A: 分阶段滚动升级，优先升级Follower节点，验证协议兼容性（inter.broker.protocol.version）。
Q: 为何Kafka不适用低频小数据量场景？
A: 分区和副本机制带来固定资源开销，低频场景下性价比低。
====print
 
二分查找利用有序性，从中间往两边查找
